[gd_scene load_steps=49 format=2]

[ext_resource path="res://new_noisetexture.tres" type="Texture" id=1]
[ext_resource path="res://Camera.gd" type="Script" id=2]
[ext_resource path="res://sun_noisetexture.tres" type="Texture" id=3]

[sub_resource type="ProceduralSky" id=1]

[sub_resource type="Environment" id=2]
background_mode = 1
background_sky = SubResource( 1 )
background_sky_custom_fov = 4.0
background_color = Color( 0.917647, 0.866667, 0.866667, 1 )
ambient_light_color = Color( 0.431373, 0.431373, 0.431373, 1 )

[sub_resource type="SphereMesh" id=3]

[sub_resource type="VisualShaderNodeScalarOp" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 15.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=9]
constant = Color( 0.0748518, 0.0233646, 0.964844, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarConstant" id=12]

[sub_resource type="VisualShaderNodeTexture" id=13]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=14]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=15]
output_port_for_preview = 0
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=16]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=17]
output_port_for_preview = 0
operator = 6

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarFunc" id=19]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeColorConstant" id=20]
constant = Color( 0.254211, 0.957031, 0, 1 )

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=23]

[sub_resource type="VisualShaderNodeVectorCompose" id=24]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
operator = 6

[sub_resource type="VisualShaderNodeVectorOp" id=26]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=29]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=30]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=31]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=32]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShader" id=33]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled;

uniform sampler2D tex_vtx_6;
uniform sampler2D tex_frg_2;



void vertex() {
// Input:4
	vec3 n_out4p0 = VERTEX;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Texture:6
	vec4 tex_vtx_6_read = texture(tex_vtx_6, n_out5p0.xy);
	vec3 n_out6p0 = tex_vtx_6_read.rgb;
	float n_out6p1 = tex_vtx_6_read.a;

// ScalarOp:9
	float n_in9p1 = 0.50000;
	float n_out9p0 = dot(n_out6p0, vec3(0.333333, 0.333333, 0.333333)) - n_in9p1;

// ScalarOp:10
	float n_in10p1 = 0.00000;
	float n_out10p0 = max(n_out9p0, n_in10p1);

// ScalarOp:7
	float n_in7p1 = 2.00000;
	float n_out7p0 = n_out10p0 / n_in7p1;

// ScalarOp:8
	float n_in8p1 = 1.00000;
	float n_out8p0 = n_out7p0 + n_in8p1;

// VectorOp:3
	vec3 n_out3p0 = n_out4p0 * vec3(n_out8p0);

// Output:0
	VERTEX = n_out3p0;

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:8
	float n_out8p0 = n_out3p0.x;
	float n_out8p1 = n_out3p0.y;
	float n_out8p2 = n_out3p0.z;

// Scalar:19
	float n_out19p0 = 0.000000;

// ScalarOp:7
	float n_in7p1 = 1.00000;
	float n_out7p0 = mod(n_out19p0, n_in7p1);

// ScalarOp:10
	float n_out10p0 = n_out8p0 + n_out7p0;

// VectorCompose:9
	vec3 n_out9p0 = vec3(n_out10p0, n_out8p1, n_out8p2);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out9p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarOp:20
	float n_in20p1 = 0.50000;
	float n_out20p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) - n_in20p1;

// ScalarOp:21
	float n_in21p1 = 0.00000;
	float n_out21p0 = max(n_out20p0, n_in21p1);

// ScalarOp:22
	float n_in22p1 = 3.00000;
	float n_out22p0 = n_out21p0 * n_in22p1;

// Color:5
	vec3 n_out5p0 = vec3(0.254211, 0.957031, 0.000000);
	float n_out5p1 = 1.000000;

// ScalarFunc:4
	float n_out4p0 = round(dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)));

// VectorOp:12
	vec3 n_out12p0 = n_out5p0 * vec3(n_out4p0);

// VectorOp:23
	vec3 n_out23p0 = max(vec3(n_out22p0), n_out12p0);

// ScalarOp:17
	float n_in17p1 = -1.00000;
	float n_out17p0 = n_out4p0 * n_in17p1;

// ScalarOp:18
	float n_in18p1 = 1.00000;
	float n_out18p0 = n_out17p0 + n_in18p1;

// Color:16
	vec3 n_out16p0 = vec3(0.074852, 0.023365, 0.964844);
	float n_out16p1 = 1.000000;

// VectorOp:15
	vec3 n_out15p0 = vec3(n_out18p0) * n_out16p0;

// VectorOp:14
	vec3 n_out14p0 = n_out23p0 + n_out15p0;

// Output:0
	ALBEDO = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -710.532, -38.5 )
modes/cull = 2
modes/depth_draw = 3
nodes/vertex/0/position = Vector2( 300, 200 )
nodes/vertex/3/node = SubResource( 26 )
nodes/vertex/3/position = Vector2( 80, 320 )
nodes/vertex/4/node = SubResource( 27 )
nodes/vertex/4/position = Vector2( -120, 80 )
nodes/vertex/5/node = SubResource( 28 )
nodes/vertex/5/position = Vector2( -800, 340 )
nodes/vertex/6/node = SubResource( 29 )
nodes/vertex/6/position = Vector2( -660, 220 )
nodes/vertex/7/node = SubResource( 30 )
nodes/vertex/7/position = Vector2( -280, 380 )
nodes/vertex/8/node = SubResource( 31 )
nodes/vertex/8/position = Vector2( -80, 400 )
nodes/vertex/9/node = SubResource( 32 )
nodes/vertex/9/position = Vector2( -480, 280 )
nodes/vertex/10/node = SubResource( 25 )
nodes/vertex/10/position = Vector2( -300, 240 )
nodes/vertex/connections = PoolIntArray( 3, 0, 0, 0, 4, 0, 3, 0, 5, 0, 6, 0, 7, 0, 8, 0, 8, 0, 3, 1, 6, 0, 9, 0, 9, 0, 10, 0, 10, 0, 7, 0 )
nodes/fragment/0/position = Vector2( 1540, 40 )
nodes/fragment/2/node = SubResource( 13 )
nodes/fragment/2/position = Vector2( 260, 20 )
nodes/fragment/3/node = SubResource( 18 )
nodes/fragment/3/position = Vector2( -480, 80 )
nodes/fragment/4/node = SubResource( 19 )
nodes/fragment/4/position = Vector2( 660, 220 )
nodes/fragment/5/node = SubResource( 20 )
nodes/fragment/5/position = Vector2( 880, 340 )
nodes/fragment/6/node = SubResource( 21 )
nodes/fragment/6/position = Vector2( -680, 260 )
nodes/fragment/7/node = SubResource( 22 )
nodes/fragment/7/position = Vector2( -300, 240 )
nodes/fragment/8/node = SubResource( 23 )
nodes/fragment/8/position = Vector2( -300, 80 )
nodes/fragment/9/node = SubResource( 24 )
nodes/fragment/9/position = Vector2( 80, 100 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( -100, 240 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( -500, 240 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( 1040, 220 )
nodes/fragment/14/node = SubResource( 7 )
nodes/fragment/14/position = Vector2( 1320, 240 )
nodes/fragment/15/node = SubResource( 8 )
nodes/fragment/15/position = Vector2( 1040, 420 )
nodes/fragment/16/node = SubResource( 9 )
nodes/fragment/16/position = Vector2( 880, 560 )
nodes/fragment/17/node = SubResource( 10 )
nodes/fragment/17/position = Vector2( 660, 460 )
nodes/fragment/18/node = SubResource( 11 )
nodes/fragment/18/position = Vector2( 840, 440 )
nodes/fragment/19/node = SubResource( 12 )
nodes/fragment/19/position = Vector2( -382.044, 416 )
nodes/fragment/20/node = SubResource( 14 )
nodes/fragment/20/position = Vector2( 460, 20 )
nodes/fragment/21/node = SubResource( 15 )
nodes/fragment/21/position = Vector2( 660, 20 )
nodes/fragment/22/node = SubResource( 16 )
nodes/fragment/22/position = Vector2( 860, 20 )
nodes/fragment/23/node = SubResource( 17 )
nodes/fragment/23/position = Vector2( 1180, 20 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 8, 0, 8, 1, 9, 1, 8, 2, 9, 2, 9, 0, 2, 0, 8, 0, 10, 0, 7, 0, 10, 1, 10, 0, 9, 0, 6, 0, 11, 0, 4, 0, 12, 1, 4, 0, 17, 0, 16, 0, 15, 1, 17, 0, 18, 0, 18, 0, 15, 0, 15, 0, 14, 1, 5, 0, 12, 0, 14, 0, 0, 0, 19, 0, 7, 0, 2, 0, 20, 0, 20, 0, 21, 0, 21, 0, 22, 0, 22, 0, 23, 0, 12, 0, 23, 1, 23, 0, 14, 0 )

[sub_resource type="ShaderMaterial" id=34]
shader = SubResource( 33 )

[sub_resource type="VisualShaderNodeScalarOp" id=35]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=36]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=37]
constant = Color( 1, 1, 0, 1 )

[sub_resource type="VisualShaderNodeTexture" id=38]
output_port_for_preview = 0
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=39]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=40]
constant = Color( 0.992157, 1, 0, 0.854902 )

[sub_resource type="VisualShaderNodeScalarFunc" id=41]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=42]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=43]
function = 19

[sub_resource type="VisualShader" id=44]
code = "shader_type spatial;



void vertex() {
// Output:0

}

void fragment() {
// Color:6
	vec3 n_out6p0 = vec3(0.992157, 1.000000, 0.000000);
	float n_out6p1 = 0.854902;

// Output:0
	EMISSION = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -429.554, 101.5 )
nodes/fragment/0/position = Vector2( 540, 120 )
nodes/fragment/2/node = SubResource( 37 )
nodes/fragment/2/position = Vector2( -200, 180 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( -260, 280 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -560, 400 )
nodes/fragment/6/node = SubResource( 40 )
nodes/fragment/6/position = Vector2( 80, 140 )
nodes/fragment/7/node = SubResource( 41 )
nodes/fragment/7/position = Vector2( -100, 400 )
nodes/fragment/8/node = SubResource( 42 )
nodes/fragment/8/position = Vector2( 80, 260 )
nodes/fragment/9/node = SubResource( 43 )
nodes/fragment/9/position = Vector2( -100, 640 )
nodes/fragment/10/node = SubResource( 35 )
nodes/fragment/10/position = Vector2( -40, 700 )
nodes/fragment/11/node = SubResource( 36 )
nodes/fragment/11/position = Vector2( 240, 440 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 3, 0, 7, 0, 7, 0, 8, 0, 2, 0, 8, 1, 7, 0, 9, 0, 9, 0, 10, 0, 8, 0, 11, 0, 10, 0, 11, 1, 6, 0, 0, 5 )

[sub_resource type="ShaderMaterial" id=45]
shader = SubResource( 44 )

[node name="Spatial" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2 )
environment = SubResource( 2 )
script = ExtResource( 2 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -1.62921e-07, -0.5, 0.866025, 0, 0.866025, 0.5, -1, 8.14603e-08, -1.41093e-07, 0, 0, 0 )
visible = false

[node name="CSGSphere" type="MeshInstance" parent="."]
mesh = SubResource( 3 )
material/0 = SubResource( 34 )

[node name="ColorRect" type="ColorRect" parent="."]
margin_right = 300.0
margin_bottom = 200.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="ColorRect"]
anchor_left = 0.05
anchor_top = 0.05
anchor_right = 1.0
anchor_bottom = 1.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "TestTestTest"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 10, 10, -10 )
light_energy = 6.9
shadow_enabled = true
omni_range = 20.7

[node name="CSGSphere" type="CSGSphere" parent="OmniLight"]
transform = Transform( 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0 )
radial_segments = 22
rings = 22
material = SubResource( 45 )
